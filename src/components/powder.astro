<div id="powder" class="absolute inset-0">
  <canvas id="powder-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 10000;
  const SPEED = 0.01;

  class Particle {
    x: number;
    y: number;
    z: number;
    size: number;
    color: string;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.size = Math.random() * 0.001 + 1;
      const colors = ["#d8052ce9", "#a90117ff", "#b01b1bff"];
      this.color = colors[Math.floor(Math.random() * colors.length)];
    }

    update(width: number, height: number, speed: number) {
    const dx = 0; 
    const dy = 1.5; 
    this.x += dx * speed * 10;
    this.y += dy * speed * 10;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.z = 0;
        this.size = Math.random() * 0.5 + 1;
        const colors = ["rgba(175, 61, 61, 1)", "#rgba(177, 62, 62, 1)", "rgba(163, 18, 18, 1)"];
        this.color = colors[Math.floor(Math.random() * colors.length)];
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.save();
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
      ctx.fillStyle = this.color;
      ctx.globalAlpha = 0.7;
      ctx.fill();
      ctx.restore();
    }
  }

  const particles = Array.from({ length: COUNT }, () => new Particle(0, 0, 0));
  let rafId = 0;

  const canvas = document.querySelector(
    "#powder-canvas",
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#powder") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const particle of particles) {
      particle.x = Math.random() * width - width / 2;
      particle.y = Math.random() * height - height / 2;
      particle.z = 0;
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(197, 8, 8, 1)";
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    ctx.clearRect(-width / 2, -height / 2, width, height);
    ctx.fillRect(-width / 2, -height / 2, width, height);
    for (const particle of particles) {
      particle.update(width, height, SPEED);
      particle.draw(ctx);
    }
    rafId = requestAnimationFrame(frame);
  }
</script>
