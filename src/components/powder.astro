<div id="powder" class="absolute inset-0">
  <canvas id="powder-canvas"></canvas>
</div>

<script>
  import invariant from "tiny-invariant";

  const COUNT = 2500;
  const SPEED = 0.05;

  class Particle {
    x: number;
    y: number;
    z: number;
    size: number;
    color: string;
    settled: boolean;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.size = Math.random() * 0.05 + 10;
      this.color = "rgba(197, 8, 8, 1)"
      this.settled = false;
    }

    update(width: number, height: number, speed: number, ground: number[]) {
      if (this.settled) return;
      const dx = 0;
      const dy = 1.5;
      this.x += dx * speed * 10;
      this.y += dy * speed * 10;
      // Check if reached ground
      const groundY = ground[Math.floor(this.x + width / 2)] ?? (height / 2);
      if (this.y + this.size >= groundY) {
        this.y = groundY - this.size;
        this.settled = true;
        ground[Math.floor(this.x + width / 2)] -= this.size; // Accumulate
      }
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.z = 0;
        this.size = Math.random() * 0.5 + 15;
        this.color = "rgba(197, 8, 8, 1)"
        this.settled = false;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.save();
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
      ctx.fillStyle = this.color;
      ctx.globalAlpha = 0.7;
      ctx.fill();
      ctx.restore();
    }
  }

  let particles = Array.from({ length: COUNT }, () => new Particle(0, 0, 0));
  let ground: number[] = [];
  let rafId = 0;

  const canvas = document.querySelector(
    "#powder-canvas",
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#powder") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    ground = Array(width).fill(height / 2);
    particles = [];
    for (let i = 0; i < COUNT; i++) {
      const x = Math.random() * width - width / 2;
      const y = -height / 2 - Math.random() * height; // Empieza fuera de pantalla arriba
      particles.push(new Particle(x, y, 0));
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(139, 0, 0, 1)";
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    ctx.clearRect(-width / 2, -height / 2, width, height);
    ctx.fillRect(-width / 2, -height / 2, width, height);
    // Draw ground
    ctx.save();
    ctx.beginPath();
    ctx.moveTo(-width / 2, ground[0]);
    for (let i = 1; i < ground.length; i++) {
      ctx.lineTo(i - width / 2, ground[i]);
    }
    ctx.lineTo(width / 2, height / 2);
    ctx.lineTo(-width / 2, height / 2);
    ctx.closePath();
    ctx.fillStyle = "rgba(139, 0, 0, 1)";
    ctx.globalAlpha = 0.8;
    ctx.fill();
    ctx.restore();
    // Draw particles
    let filled = true;
    for (let i = 0; i < ground.length; i++) {
      if (ground[i] > -height / 2 + 2) {
        filled = false;
        break;
      }
    }
    if (!filled) {
      // Si hay menos partículas en pantalla, seguir generando más desde arriba
      const activeParticles = particles.filter(p => !p.settled);
      if (activeParticles.length < COUNT) {
        for (let i = activeParticles.length; i < COUNT; i++) {
          const x = Math.random() * width - width / 2;
          const y = -height / 2 - Math.random() * height;
          particles.push(new Particle(x, y, 0));
        }
      }
      for (const particle of particles) {
        particle.update(width, height, SPEED, ground);
        particle.draw(ctx);
      }
      rafId = requestAnimationFrame(frame);
    } else {
      // Pantalla llena, detener animación
      for (const particle of particles) {
        if (!particle.settled) {
          particle.settled = true;
        }
        particle.draw(ctx);
      }
    }
  }
</script>
